!3 Acceptance Test Suite for the Conferencing API - getConferenceInfo

   * Create a 1 party conference and end it after a short wait.
   * Check the conference info and appropriante properties during the test.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.ConferenceFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|check|createConference||
|check|conferenceState|Initial|
|check|numberOfParticipants|0|
|check|numberOfActiveParticipants|0|
|check|createTimeNotNull|true|
|check|startTimeNotNull|false|
|check|endTimeNotNull|false|
|check|durationGreaterThanZero|false|
|enter|activeParticipant|1|
|check|createDialog|OK|
|check|inviteParticipant|OK|
|check|waitForParticipantConnectedEvent|OK|
|check|numberOfActiveParticipants|1|
|check|participantState|Connected|
|check|conferenceState|Active|
|check|createTimeNotNull|true|
|check|startTimeNotNull|true|
|check|endTimeNotNull|false|
|check|waitForConferenceActiveEvent|OK|
|enter|waitSeconds|2|
|check|durationGreaterThanZero|true|
|press|endConference|
|check|waitForParticipantTerminatedEvent|OK|
|check|waitForConferenceEndedEventWithEndedByApplication|OK|
|check|conferenceState|Ended|
|check|numberOfActiveParticipants|0|
|check|numberOfParticipants|1|
|check|createTimeNotNull|true|
|check|startTimeNotNull|true|
|check|endTimeNotNull|true|
|check|durationGreaterThanZero|true|
|check|participantState|Terminated|

   * Create a 2 party conference and terminate all the participant after a short wait.
   * Expect to get all the appropriate events. Validate the conference info and conferene properties.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.ConferenceFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|secondPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|check|createConference||
|check|conferenceState|Initial|
|enter|activeParticipant|1|
|check|createDialog|OK|
|check|inviteParticipant|OK|
|check|waitForParticipantConnectedEvent|OK|
|check|numberOfParticipants|1|
|check|numberOfActiveParticipants|1|
|check|participantState|Connected|
|check|waitForConferenceActiveEvent|OK|
|check|conferenceState|Active|
|enter|activeParticipant|2|
|check|createDialog|OK|
|check|inviteParticipant|OK|
|check|waitForParticipantConnectedEvent|OK|
|check|numberOfParticipants|2|
|check|numberOfActiveParticipants|2|
|check|participantState|Connected|
|enter|waitSeconds|4|
|enter|activeParticipant|1|
|check|terminateParticipant|OK|
|check|waitForParticipantTerminatedEvent|OK|
|check|numberOfParticipants|2|
|check|numberOfActiveParticipants|1|
|check|participantState|Terminated|
|enter|activeParticipant|2|
|check|terminateParticipant|OK|
|check|waitForParticipantTerminatedEvent|OK|
|check|numberOfParticipants|2|
|check|numberOfActiveParticipants|0|
|check|participantState|Terminated|
|check|waitForConferenceEndedEventWithLastParticipantTerminated|OK|
|check|conferenceState|Ended|

   * HAPPY
   * Create a 2 party conference and users will disconnect after a short wait.
   * Expect to get all the appropriate events. Validate the conference info.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.ConferenceFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:hangup.3000@${mockphonesIpAddress}:${mockphonesPort}|
|enter|secondPhoneUri|sip:hangup.4000@${mockphonesIpAddress}:${mockphonesPort}|
|check|createConference||
|enter|activeParticipant|1|
|check|createDialog|OK|
|check|inviteParticipant|OK|
|check|waitForParticipantConnectedEvent|OK|
|check|numberOfParticipants|1|
|check|numberOfActiveParticipants|1|
|check|participantState|Connected|
|check|waitForConferenceActiveEvent|OK|
|enter|activeParticipant|2|
|check|createDialog|OK|
|check|inviteParticipant|OK|
|check|waitForParticipantConnectedEvent|OK|
|check|numberOfParticipants|2|
|check|numberOfActiveParticipants|2|
|check|participantState|Connected|
|enter|waitSeconds|2|
|enter|activeParticipant|1|
|check|waitForParticipantDisconnectedEvent|OK|
|check|numberOfParticipants|2|
|check|numberOfActiveParticipants|1|
|check|participantState|Disconnected|
|enter|activeParticipant|2|
|check|waitForParticipantDisconnectedEvent|OK|
|check|numberOfParticipants|2|
|check|numberOfActiveParticipants|0|
|check|participantState|Disconnected|
|check|waitForConferenceEndedEventWithLastParticipantDisconnected|OK|

  * I would like to be able to get duration of the conference with 1 participant and end the conference after a while.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.ConferenceFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|check|createConference||
|check|duration|0|
|enter|activeParticipant|1|
|check|createDialog|OK|
|check|inviteParticipant|OK|
|check|waitForParticipantConnectedEvent|OK|
|check|waitForConferenceActiveEvent|OK|
|check|duration|0|
|enter|waitSeconds|1|
|check|duration|1|
|enter|waitSeconds|1|
|check|duration|2|
|enter|waitSeconds|1|
|check|duration|3|
|press|endConference|
|check|waitForParticipantTerminatedEvent|OK|
|check|waitForConferenceEndedEventWithEndedByApplication|OK|
|check|durationGreaterThanZero|true|
|check|duration||

