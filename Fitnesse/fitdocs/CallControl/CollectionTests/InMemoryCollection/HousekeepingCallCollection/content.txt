	* HOUSEKEEPING OF EXPIRED AND DEAD CALL
    * I would like to create a call from two outbound dialogs, and then terminate this call
	* Housekeeper should remove that object from collection when it expires.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.OutboundCallFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|check|cleanCallCollection|OK|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|secondPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|callMaxTTL|500|
|check|createFirstDialog|OK|
|check|createSecondDialog|OK|
|check|joinDialogsOneAndTwo|OK|
|check|waitForCallConnectedEvent|OK|
|enter|waitSeconds|1|
|press|terminateCall|
|check|waitForCallTerminatedEventWithTerminatedByApplication|OK|
|check|callTerminationCause|!-TerminatedByApplication-!|
|enter|waitSeconds|1|
|press|storeCallCollectionSize|
|press|housekeepCallCollection|
|check|callCollectionSizeDelta|-1|
|check|callCollectionSize|0|

	* HOUSEKEEPING OF NON-EXPIRED AND DEAD CALL
    * I would like to create a call from two outbound dialogs, and then terminate this call.
    * I want to check that when object has not expired then the housekeeper will not remove that object from collection.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.OutboundCallFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|secondPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|callMaxTTL|5000|
|check|createFirstDialog|OK|
|check|createSecondDialog|OK|
|check|joinDialogsOneAndTwo|OK|
|check|waitForCallConnectedEvent|OK|
|enter|waitSeconds|1|
|press|terminateCall|
|check|waitForCallTerminatedEventWithTerminatedByApplication|OK|
|check|callTerminationCause|!-TerminatedByApplication-!|
|enter|waitSeconds|1|
|press|storeCallCollectionSize|
|press|housekeepCallCollection|
|check|callCollectionSizeDelta|0|
|check|cleanCallCollection|OK|
|check|callCollectionSize|0|


	* HOUSEKEEPING OF EXPIRED BUT NOT DEAD CALL
    * I would like to create a call from two outbound dialogs. This call will expire but will not be terminated.
	* Housekeeper should terminate that call first and when runs next time then will remove that object from collection.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.OutboundCallFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|secondPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|callMaxTTL|500|
|check|createFirstDialog|OK|
|check|createSecondDialog|OK|
|check|joinDialogsOneAndTwo|OK|
|check|waitForCallConnectedEvent|OK|
|enter|waitSeconds|1|
|press|storeCallCollectionSize|
|press|housekeepCallCollection|
|check|waitForCallTerminatedEventWithHousekept|OK|
|check|callCollectionSizeDelta|0|
|check|callTerminationCause|!-Housekept-!|
|press|housekeepCallCollection|
|check|callCollectionSizeDelta|-1|
|check|callCollectionSize|0|

	* HOUSEKEEPING OF NON-EXPIRED AND NOT DEAD CALL
    * I would like to create a call from two outbound dialogs. It is not expired call which is still active.
	* Housekeeper should not terminate that call, neither should remove that object from collection.

|Action Fixture.|
|start|!-com.bt.aloha.fitnesse.OutboundCallFixture-!|
|enter|ipAddressPattern|${localIpPattern}|
|enter|waitTimeoutSeconds|${waitTimeoutSeconds}|
|enter|firstPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|secondPhoneUri|sip:happy@${mockphonesIpAddress}:${mockphonesPort}|
|enter|callMaxTTL|5000|
|check|createFirstDialog|OK|
|check|createSecondDialog|OK|
|check|joinDialogsOneAndTwo|OK|
|check|waitForCallConnectedEvent|OK|
|enter|waitSeconds|1|
|press|storeCallCollectionSize|
|press|housekeepCallCollection|
|check|callCollectionSizeDelta|0|
|check|cleanCallCollection|OK|
|check|callCollectionSize|0|
|enter|callMaxTTL|3600000|
